{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Cloud/Project-NL/liars-ask-react-deploy/client/src/client/questions/YourAnswer.js\";\nimport React from 'react';\nimport Mde from '../editor/Mde';\nimport { isAuthenticated } from '../../controllers/userController';\nimport { withRouter } from 'react-router-dom';\nimport { postAnswer } from '../../controllers/askController';\nimport Notify from '../components/Notify';\n\nclass YourAnswer extends React.Component {\n  constructor() {\n    super();\n\n    this.handlePostAnswer = () => {\n      let editor = document.querySelector(\"textarea.mde-text\");\n\n      if (editor && editor.value.length > 0) {\n        let body = editor.value;\n\n        let userId = isAuthenticated().user._id;\n\n        let token = isAuthenticated().token;\n        let quesId = this.props.match.params.quesId;\n        postAnswer({\n          body,\n          userId,\n          quesId\n        }, token).then(res => {\n          this.setState({\n            message: res.message\n          });\n\n          if (res.message === \"Your answer added\") {\n            editor.value = \"\";\n            let email = isAuthenticated().user.email;\n            let photo = isAuthenticated().user.photo;\n            this.props.addAnswer({\n              body,\n              votes: [],\n              owner: {\n                _id: userId,\n                email,\n                photo,\n                votes: []\n              }\n            });\n          }\n        });\n      } else {\n        alert(\"Please enter your answer and turn editor to write mode\");\n      }\n    };\n\n    this.clearMess = () => {\n      this.setState({\n        message: \"\"\n      });\n    };\n\n    this.state = {\n      message: \"\"\n    };\n  }\n\n  render() {\n    let message = this.state.message;\n    return React.createElement(\"div\", {\n      id: \"youranswer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Notify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), message !== \"\" && React.createElement(Notify, {\n      class: \"on\",\n      text: message,\n      clearMess: this.clearMess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"answers-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"mb24\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Your answer\"), React.createElement(Mde, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"s-btn s-btn__outline s-btn__primary mt24\",\n      onClick: this.handlePostAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Post your answer\")));\n  }\n\n}\n\nexport default withRouter(YourAnswer);","map":{"version":3,"sources":["/opt/lampp/htdocs/Cloud/Project-NL/liars-ask-react-deploy/client/src/client/questions/YourAnswer.js"],"names":["React","Mde","isAuthenticated","withRouter","postAnswer","Notify","YourAnswer","Component","constructor","handlePostAnswer","editor","document","querySelector","value","length","body","userId","user","_id","token","quesId","props","match","params","then","res","setState","message","email","photo","addAnswer","votes","owner","alert","clearMess","state","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Mde from '../editor/Mde';\nimport { isAuthenticated } from '../../controllers/userController';\nimport { withRouter } from 'react-router-dom';\nimport { postAnswer } from '../../controllers/askController' ;\nimport Notify from '../components/Notify';\n\n\nclass YourAnswer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            message: \"\"\n        }\n    }\n\n    handlePostAnswer = () => {\n        let editor = document.querySelector(\"textarea.mde-text\");\n        if(editor && editor.value.length > 0) {\n            let body = editor.value;\n            let userId = isAuthenticated().user._id;\n            let token  = isAuthenticated().token;\n            let quesId = this.props.match.params.quesId;\n\n            postAnswer( {body, userId, quesId}, token )\n            .then( res => {\n                this.setState( {message: res.message} );\n                if(res.message === \"Your answer added\") {\n                    editor.value = \"\";\n                    let email = isAuthenticated().user.email;\n                    let photo = isAuthenticated().user.photo;\n                    this.props.addAnswer({\n                        body,\n                        votes: [],\n                        owner: {\n                            _id: userId,\n                            email,\n                            photo,\n                            votes: []\n                        }\n                    })\n                }\n            })\n\n        } else {\n            alert(\"Please enter your answer and turn editor to write mode\");\n        }\n    }\n\n    clearMess = () => {\n        this.setState( {message: \"\"} );\n    }\n\n    render() {\n        let { message } = this.state;\n        return (\n            <div id=\"youranswer\">\n                <Notify />  \n                {message !== \"\" &&  <Notify class=\"on\" text={message} clearMess={this.clearMess} />}\n                <div className=\"answers-header\">\n                    <h2 className=\"mb24\">Your answer</h2>\n                    <Mde />\n                    <button\n                        className=\"s-btn s-btn__outline s-btn__primary mt24\"\n                        onClick={this.handlePostAnswer}\n                    >Post your answer</button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default withRouter(YourAnswer);"]},"metadata":{},"sourceType":"module"}