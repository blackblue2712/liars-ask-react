{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Study_space/liars-ask-react/src/client/blogs/EditBlog.js\";\nimport React from 'react';\nimport { getSingleBlog, putEditBlog } from '../../controllers/blogController';\nimport Mde from '../editor/Mde';\nimport Tags from '../components/Tags';\nimport { isAuthenticated } from '../../controllers/userController';\nimport Notify from '../components/Notify';\n\nclass EditAcm extends React.Component {\n  constructor() {\n    super();\n\n    this.handleEditBlog = () => {\n      let id = this.state.id;\n      let token = isAuthenticated().token;\n      let editor = document.querySelector(\"textarea.mde-text \");\n      let body = \"\";\n\n      if (editor) {\n        body = editor.value;\n        let title = this.state.title; // tags\n\n        let tagsname = document.getElementById(\"tagsname\").value;\n        let tagsnameArray = tagsname.split(\" \");\n        tagsnameArray = tagsnameArray.filter(t => t !== \"\");\n\n        if (title) {\n          if (body === \"\") {\n            body = undefined;\n          }\n\n          putEditBlog({\n            title,\n            body,\n            tagsnameArray,\n            id\n          }, token).then(res => {\n            console.log(res);\n            this.setState({\n              message: res.message\n            });\n          });\n        }\n      } else {\n        alert(\"Please turn to write mode\");\n      }\n    };\n\n    this.closeTag = text => {\n      let tagsname = document.getElementById(\"tagsname\");\n      let tagsnameArray = tagsname.value.split(\" \").filter(t => t !== text);\n      tagsname.value = tagsnameArray.join(\" \");\n      this.setState({\n        tagDom: tagsname.value\n      });\n    };\n\n    this.handleChangeTag = e => {\n      if (e.keyCode === 32) {\n        let tagsname = document.getElementById(\"tagsname\");\n        let tagreplace = document.getElementById(\"tageditor-replacing-tagnames--input\");\n        tagsname.value = tagsname.value + e.target.value;\n        this.setState({\n          tagDom: tagsname.value\n        });\n        tagreplace.value = \"\";\n      }\n    };\n\n    this.handleChangeValue = text => {\n      this.setState({\n        title: text\n      });\n    };\n\n    this.clearMess = () => {\n      this.setState({\n        message: \"\"\n      });\n    };\n\n    this.state = {\n      title: \"\",\n      body: \"\",\n      id: \"\",\n      tagDom: \"\",\n      message: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // fetching data\n    getSingleBlog(this.props.match.params.blogId).then(res => {\n      if (res) {\n        this.setState({\n          title: res.title,\n          body: res.body,\n          id: res._id,\n          tagDom: res.anonymousTags.join(\" \")\n        });\n        document.getElementById(\"tagsname\").value = this.state.tagDom;\n      }\n    }); // \n\n    let editor = document.querySelector(\"textarea.mde-text \");\n    editor.setAttribute(\"id\", \"announ-content\");\n    editor.setAttribute(\"name\", \"announ-content\");\n    document.querySelector(\"#tageditor-replacing-tagnames--input\").addEventListener(\"keyup\", this.handleChangeTag, false);\n  }\n\n  componentDidUpdate() {\n    let tagsIncludedSize = document.querySelector(\".tags-included\").offsetWidth;\n    document.querySelector(\"#tageditor-replacing-tagnames--input\").style.paddingLeft = tagsIncludedSize + 10 + \"px\";\n  }\n\n  componentWillUnmount() {\n    document.querySelector(\"#tageditor-replacing-tagnames--input\").removeEventListener(\"keyup\", this.handleChangeTag, false);\n  }\n\n  render() {\n    const _this$state = this.state,\n          tagDom = _this$state.tagDom,\n          message = _this$state.message,\n          title = _this$state.title,\n          body = _this$state.body;\n    console.log(tagDom);\n    return React.createElement(\"div\", {\n      id: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"mainbar\",\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Notify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), message !== \"\" && React.createElement(Notify, {\n      class: \"on\",\n      text: message,\n      clearMess: this.clearMess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"announ-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bg-white bar-sm bs-md p16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-title ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      className: \"s-label mb4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Title\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"A programming language or whatever \"))), React.createElement(\"div\", {\n      className: \"ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"title\",\n      name: \"title\",\n      type: \"text\",\n      className: \"s-input w-100\",\n      value: title,\n      onChange: e => this.handleChangeValue(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"post-editor mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ps-relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"announ-content\",\n      className: \"s-label mb16 d-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Body\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Announcement body (all of the information about the announcement)\")), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, body), React.createElement(Mde, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"d-flex align-items-center pb12 fc-light fs-caption mt16 mb24\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mr16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"``` \", React.createElement(\"code\", {\n      className: \"ba bc-black-9 px4 py2 bar-sm bg-black-050 fc-black-800 ff-mono\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"code\"), \" ```\"), React.createElement(\"div\", {\n      className: \"mr16 fw-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"**bold**\"), React.createElement(\"div\", {\n      className: \"mr16 fs-italic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"*italic*\"), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \">quote\")), React.createElement(\"div\", {\n      className: \"ps-relative pt24\",\n      id: \"tag-editor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"tagsname\",\n      className: \"s-label mb16 d-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Tags\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Add tags to describe what your announcement is about\")), React.createElement(\"div\", {\n      className: \"ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"tagsname\",\n      name: \"tagsname\",\n      type: \"text\",\n      className: \"s-input w-100 d-none\",\n      placeholder: \"e.g. (javascript xml react)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tags-editor ps-relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tags-included ps-absolute\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, tagDom.split(\" \").map((tag, index) => {\n      return tag !== \"\" && React.createElement(Tags, {\n        key: index,\n        id: \"data-\" + tag,\n        closeTag: () => this.closeTag(tag),\n        name: tag,\n        close: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      });\n    })), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"s-input w-100\",\n      placeholder: \"e.g. (javascript xml react)\",\n      id: \"tageditor-replacing-tagnames--input\",\n      onChange: e => this.handleChangeTag(e.target.value, e.keyCode),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))))), React.createElement(\"button\", {\n      className: \"s-btn s-btn__outline s-btn__primary mt24\",\n      onClick: this.handleEditBlog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Save this\")))), React.createElement(\"div\", {\n      className: \"clear-fix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default EditAcm;","map":{"version":3,"sources":["/opt/lampp/htdocs/Study_space/liars-ask-react/src/client/blogs/EditBlog.js"],"names":["React","getSingleBlog","putEditBlog","Mde","Tags","isAuthenticated","Notify","EditAcm","Component","constructor","handleEditBlog","id","state","token","editor","document","querySelector","body","value","title","tagsname","getElementById","tagsnameArray","split","filter","t","undefined","then","res","console","log","setState","message","alert","closeTag","text","join","tagDom","handleChangeTag","e","keyCode","tagreplace","target","handleChangeValue","clearMess","componentDidMount","props","match","params","blogId","_id","anonymousTags","setAttribute","addEventListener","componentDidUpdate","tagsIncludedSize","offsetWidth","style","paddingLeft","componentWillUnmount","removeEventListener","render","width","map","tag","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getSingleBlog, putEditBlog } from '../../controllers/blogController';\nimport Mde from '../editor/Mde';\nimport Tags from '../components/Tags';\nimport { isAuthenticated } from '../../controllers/userController';\nimport Notify from '../components/Notify';\n\nclass EditAcm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            title: \"\",\n            body: \"\",\n            id: \"\",\n            tagDom: \"\",\n            message: \"\",\n        }\n    }\n\n    handleEditBlog = () => {\n        let id = this.state.id;\n        let token = isAuthenticated().token;\n        let editor = document.querySelector(\"textarea.mde-text \");\n        let body = \"\";\n        if(editor) {\n            body = editor.value;\n            let title = this.state.title;\n            // tags\n            let tagsname = document.getElementById(\"tagsname\").value;\n            let tagsnameArray = tagsname.split(\" \")\n            tagsnameArray = tagsnameArray.filter( t => t !== \"\");\n\n            if(title) {\n                if(body === \"\") {\n                    body = undefined;\n                }\n                putEditBlog({title, body, tagsnameArray, id}, token)\n                .then( res => {\n                    console.log(res);\n                    this.setState( {message: res.message} );\n                })\n            }\n        } else {\n            alert(\"Please turn to write mode\")\n        }\n        \n    }\n\n    closeTag = (text) => {\n        let tagsname = document.getElementById(\"tagsname\");\n        let tagsnameArray = tagsname.value.split(\" \").filter( t => t !== text);\n        tagsname.value = tagsnameArray.join(\" \");\n        this.setState( {tagDom: tagsname.value} );\n    }\n\n    handleChangeTag = (e) => {\n        if(e.keyCode === 32) {\n            let tagsname = document.getElementById(\"tagsname\");\n            let tagreplace = document.getElementById(\"tageditor-replacing-tagnames--input\")\n            tagsname.value = tagsname.value + e.target.value;\n            this.setState( {tagDom: tagsname.value} );\n            tagreplace.value = \"\";\n        }\n    }\n\n    handleChangeValue = (text) => {\n        this.setState( {title: text} );\n    }\n\n    clearMess = () => {\n        this.setState( {message: \"\"} );\n    }\n\n    componentDidMount() {\n        // fetching data\n        getSingleBlog(this.props.match.params.blogId)\n        .then( res => {\n            if(res) {\n                this.setState( { title: res.title, body: res.body, id: res._id, tagDom: res.anonymousTags.join(\" \")} );\n                document.getElementById(\"tagsname\").value = this.state.tagDom;\n            }\n            \n        })\n        // \n        let editor = document.querySelector(\"textarea.mde-text \");\n        editor.setAttribute(\"id\", \"announ-content\")\n        editor.setAttribute(\"name\", \"announ-content\")\n\n        document.querySelector(\"#tageditor-replacing-tagnames--input\").addEventListener(\"keyup\", this.handleChangeTag, false);\n    }\n    componentDidUpdate() {\n        let tagsIncludedSize = document.querySelector(\".tags-included\").offsetWidth;\n        document.querySelector(\"#tageditor-replacing-tagnames--input\").style.paddingLeft = tagsIncludedSize + 10 + \"px\";\n    }\n    componentWillUnmount() {\n        document.querySelector(\"#tageditor-replacing-tagnames--input\").removeEventListener(\"keyup\", this.handleChangeTag, false);\n    }\n\n    render() {\n        const { tagDom, message, title, body } = this.state;\n        console.log(tagDom)\n        return (\n            <div id=\"content\">\n                <div id=\"mainbar\" style={{width: \"100%\"}}>\n                    <Notify />  \n                    {message !== \"\" &&  <Notify class=\"on\" text={message} clearMess={this.clearMess} />}\n                    <div id=\"announ-form\">\n                        <div className=\"bg-white bar-sm bs-md p16\">\n                            <div className=\"post-title ps-relative mb16\">\n                                <label htmlFor=\"title\" className=\"s-label mb4\">\n                                    Title\n                                    <p className=\"s-desscription mt4\">A programming language or whatever </p>\n                                </label>\n                            </div>\n                            <div className=\"ps-relative mb16\">\n                                <input id=\"title\" name=\"title\" type=\"text\" className=\"s-input w-100\"\n                                    value={title}\n                                    onChange={ (e) => this.handleChangeValue(e.target.value) }\n                                />\n                            </div>\n                            \n                            <div className=\"post-editor mb16\">\n                                <div className=\"ps-relative\">\n                                    <label htmlFor=\"announ-content\" className=\"s-label mb16 d-block\">\n                                        Body\n                                        <p className=\"s-desscription mt4\">Announcement body (all of the information about the announcement)</p>\n                                    </label>\n                                    {/* <ReactMarkdown source={body}/> */}\n                                    <pre>{body}</pre>\n                                    <Mde />\n                                    {/* CAPTOPN */}\n                                    <div className=\"d-flex align-items-center pb12 fc-light fs-caption mt16 mb24\">\n                                        <div className=\"mr16\">\n                                            ``` <code className=\"ba bc-black-9 px4 py2 bar-sm bg-black-050 fc-black-800 ff-mono\">code</code> ```\n                                        </div>\n                                        <div className=\"mr16 fw-bold\">\n                                            **bold**\n                                        </div>\n                                        <div className=\"mr16 fs-italic\">\n                                            *italic*\n                                        </div>\n                                        <div className=\"\">\n                                            &gt;quote\n                                        </div>\n                                    </div>\n                                    {/* TAGS EDITOR */}\n                                    <div className=\"ps-relative pt24\" id=\"tag-editor\">\n                                        <label htmlFor=\"tagsname\" className=\"s-label mb16 d-block\">\n                                            Tags\n                                            <p className=\"s-desscription mt4\">Add tags to describe what your announcement is about</p>\n                                        </label>\n                                        <div className=\"ps-relative mb16\">\n                                            <input \n                                                id=\"tagsname\" name=\"tagsname\" type=\"text\" className=\"s-input w-100 d-none\" placeholder=\"e.g. (javascript xml react)\"    \n                                            />\n                                            <div className=\"tags-editor ps-relative\" >\n                                                <span className=\"tags-included ps-absolute\">\n                                                    \n                                                    {\n                                                        tagDom.split(\" \").map( (tag, index) => {\n                                                            return tag !== \"\" && <Tags key={index} id={\"data-\" + tag} closeTag={() => this.closeTag(tag)} name={tag} close={true}/>\n                                                        })\n                                                    }\n                                                </span>\n                                            <input\n                                                type=\"text\" className=\"s-input w-100\" placeholder=\"e.g. (javascript xml react)\"\n                                                id=\"tageditor-replacing-tagnames--input\"\n                                                onChange={(e) => this.handleChangeTag(e.target.value, e.keyCode)}\n                                            />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n    \n                            <button\n                                className=\"s-btn s-btn__outline s-btn__primary mt24\"\n                                onClick={this.handleEditBlog}\n                            >Save this</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"clear-fix\"></div>\n            </div>\n        )\n    }\n}\n\nexport default EditAcm;"]},"metadata":{},"sourceType":"module"}