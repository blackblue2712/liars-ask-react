{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Study_space/liars-ask-react/src/client/asks/EditQuestion.js\";\nimport React from 'react';\nimport { getSingleQuestion } from '../../controllers/askController';\nimport Mde from '../editor/Mde';\nimport Tags from '../components/Tags';\nimport { isAuthenticated } from '../../controllers/userController';\nimport Notify from '../components/Notify';\n\nclass EditQuestion extends React.Component {\n  constructor() {\n    super();\n\n    this.handleEditBlog = () => {\n      try {\n        let id = this.state.id;\n        let token = isAuthenticated().token;\n        let editor = document.querySelector(\"textarea.mde-text \");\n        let body = \"\";\n\n        if (editor) {\n          body = editor.value;\n          let title = this.state.title; // tags\n\n          let tagsname = document.getElementById(\"tagsname\").value;\n          let tagsnameArray = tagsname.split(\" \");\n          tagsnameArray = tagsnameArray.filter(t => t !== \"\");\n\n          if (title) {\n            if (body === \"\") {\n              body = undefined;\n            } // putEditBlog({title, body, tagsnameArray, id}, token)\n            // .then( res => {\n            //     console.log(res);\n            //     this.setState( {message: res.message} );\n            // })\n\n          }\n        } else {\n          alert(\"Please turn to write mode\");\n        }\n      } catch (err) {\n        this.setState({\n          message: \"Error catched\"\n        });\n      }\n    };\n\n    this.closeTag = text => {\n      let tagsname = document.getElementById(\"tagsname\");\n      let tagsnameArray = tagsname.value.split(\" \").filter(t => t !== text);\n      tagsname.value = tagsnameArray.join(\" \");\n      this.setState({\n        tagDom: tagsname.value\n      });\n    };\n\n    this.handleChangeTag = e => {\n      if (e.keyCode === 32) {\n        let tagsname = document.getElementById(\"tagsname\");\n        let tagreplace = document.getElementById(\"tageditor-replacing-tagnames--input\");\n        tagsname.value = tagsname.value + e.target.value;\n        this.setState({\n          tagDom: tagsname.value\n        });\n        tagreplace.value = \"\";\n      }\n    };\n\n    this.handleChangeValue = text => {\n      this.setState({\n        title: text\n      });\n    };\n\n    this.clearMess = () => {\n      this.setState({\n        message: \"\"\n      });\n    };\n\n    this.state = {\n      title: \"\",\n      body: \"\",\n      id: \"\",\n      tagDom: \"\",\n      message: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // fetching data\n    try {\n      getSingleQuestion(this.props.match.params.quesId).then(res => {\n        if (res.message) {\n          this.props.history.push(\"/404\");\n        } else {\n          this.setState({\n            title: res.title,\n            body: res.body,\n            id: res._id,\n            tagDom: res.anonymousTags.join(\" \")\n          });\n          document.getElementById(\"tagsname\").value = this.state.tagDom;\n        }\n      }); // \n\n      let editor = document.querySelector(\"textarea.mde-text \");\n      editor.setAttribute(\"id\", \"announ-content\");\n      editor.setAttribute(\"name\", \"announ-content\");\n      document.querySelector(\"#tageditor-replacing-tagnames--input\").addEventListener(\"keyup\", this.handleChangeTag, false);\n    } catch (err) {\n      alert(\"Blog not found\");\n    }\n  }\n\n  componentDidUpdate() {\n    let tagsIncludedSize = document.querySelector(\".tags-included\").offsetWidth;\n    document.querySelector(\"#tageditor-replacing-tagnames--input\").style.paddingLeft = tagsIncludedSize + 10 + \"px\";\n  }\n\n  componentWillUnmount() {\n    document.querySelector(\"#tageditor-replacing-tagnames--input\").removeEventListener(\"keyup\", this.handleChangeTag, false);\n  }\n\n  render() {\n    const _this$state = this.state,\n          tagDom = _this$state.tagDom,\n          message = _this$state.message,\n          title = _this$state.title,\n          body = _this$state.body;\n    return React.createElement(\"div\", {\n      id: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"mainbar\",\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Notify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), message !== \"\" && React.createElement(Notify, {\n      class: \"on\",\n      text: message,\n      clearMess: this.clearMess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"announ-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bg-white bar-sm bs-md p16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-title ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      className: \"s-label mb4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Title\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"A programming language or whatever \"))), React.createElement(\"div\", {\n      className: \"ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"title\",\n      name: \"title\",\n      type: \"text\",\n      className: \"s-input w-100\",\n      value: title,\n      onChange: e => this.handleChangeValue(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"post-editor mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ps-relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"announ-content\",\n      className: \"s-label mb16 d-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Body\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Announcement body (all of the information about the announcement)\")), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, body), React.createElement(Mde, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"d-flex align-items-center pb12 fc-light fs-caption mt16 mb24\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mr16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"``` \", React.createElement(\"code\", {\n      className: \"ba bc-black-9 px4 py2 bar-sm bg-black-050 fc-black-800 ff-mono\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"code\"), \" ```\"), React.createElement(\"div\", {\n      className: \"mr16 fw-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"**bold**\"), React.createElement(\"div\", {\n      className: \"mr16 fs-italic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"*italic*\"), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \">quote\")), React.createElement(\"div\", {\n      className: \"ps-relative pt24\",\n      id: \"tag-editor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"tagsname\",\n      className: \"s-label mb16 d-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Tags\", React.createElement(\"p\", {\n      className: \"s-desscription mt4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Add tags to describe what your announcement is about\")), React.createElement(\"div\", {\n      className: \"ps-relative mb16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"tagsname\",\n      name: \"tagsname\",\n      type: \"text\",\n      className: \"s-input w-100 d-none\",\n      placeholder: \"e.g. (javascript xml react)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tags-editor ps-relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tags-included ps-absolute\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, tagDom.split(\" \").map((tag, index) => {\n      return tag !== \"\" && React.createElement(Tags, {\n        key: index,\n        id: \"data-\" + tag,\n        closeTag: () => this.closeTag(tag),\n        name: tag,\n        close: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      });\n    })), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"s-input w-100\",\n      placeholder: \"e.g. (javascript xml react)\",\n      id: \"tageditor-replacing-tagnames--input\",\n      onChange: e => this.handleChangeTag(e.target.value, e.keyCode),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })))))), React.createElement(\"button\", {\n      className: \"s-btn s-btn__outline s-btn__primary mt24\",\n      onClick: this.handleEditBlog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Save this\")))), React.createElement(\"div\", {\n      className: \"clear-fix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default EditQuestion;","map":{"version":3,"sources":["/opt/lampp/htdocs/Study_space/liars-ask-react/src/client/asks/EditQuestion.js"],"names":["React","getSingleQuestion","Mde","Tags","isAuthenticated","Notify","EditQuestion","Component","constructor","handleEditBlog","id","state","token","editor","document","querySelector","body","value","title","tagsname","getElementById","tagsnameArray","split","filter","t","undefined","alert","err","setState","message","closeTag","text","join","tagDom","handleChangeTag","e","keyCode","tagreplace","target","handleChangeValue","clearMess","componentDidMount","props","match","params","quesId","then","res","history","push","_id","anonymousTags","setAttribute","addEventListener","componentDidUpdate","tagsIncludedSize","offsetWidth","style","paddingLeft","componentWillUnmount","removeEventListener","render","width","map","tag","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getSingleQuestion } from '../../controllers/askController';\nimport Mde from '../editor/Mde';\nimport Tags from '../components/Tags';\nimport { isAuthenticated } from '../../controllers/userController';\nimport Notify from '../components/Notify';\n\nclass EditQuestion extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            title: \"\",\n            body: \"\",\n            id: \"\",\n            tagDom: \"\",\n            message: \"\",\n        }\n    }\n\n    handleEditBlog = () => {\n        try {\n            let id = this.state.id;\n            let token = isAuthenticated().token;\n            let editor = document.querySelector(\"textarea.mde-text \");\n            let body = \"\";\n            if(editor) {\n                body = editor.value;\n                let title = this.state.title;\n                // tags\n                let tagsname = document.getElementById(\"tagsname\").value;\n                let tagsnameArray = tagsname.split(\" \")\n                tagsnameArray = tagsnameArray.filter( t => t !== \"\");\n\n                if(title) {\n                    if(body === \"\") {\n                        body = undefined;\n                    }\n                    // putEditBlog({title, body, tagsnameArray, id}, token)\n                    // .then( res => {\n                    //     console.log(res);\n                    //     this.setState( {message: res.message} );\n                    // })\n                }\n            } else {\n                alert(\"Please turn to write mode\")\n            }\n        } catch (err) {\n            this.setState( {message: \"Error catched\"} );\n        }\n        \n    }\n\n    closeTag = (text) => {\n        let tagsname = document.getElementById(\"tagsname\");\n        let tagsnameArray = tagsname.value.split(\" \").filter( t => t !== text);\n        tagsname.value = tagsnameArray.join(\" \");\n        this.setState( {tagDom: tagsname.value} );\n    }\n\n    handleChangeTag = (e) => {\n        if(e.keyCode === 32) {\n            let tagsname = document.getElementById(\"tagsname\");\n            let tagreplace = document.getElementById(\"tageditor-replacing-tagnames--input\")\n            tagsname.value = tagsname.value + e.target.value;\n            this.setState( {tagDom: tagsname.value} );\n            tagreplace.value = \"\";\n        }\n    }\n\n    handleChangeValue = (text) => {\n        this.setState( {title: text} );\n    }\n\n    clearMess = () => {\n        this.setState( {message: \"\"} );\n    }\n\n    componentDidMount() {\n        // fetching data\n        try {\n            getSingleQuestion(this.props.match.params.quesId)\n            .then( res => {\n                if(res.message) {\n                    this.props.history.push(\"/404\");\n                } else {\n                    this.setState( { title: res.title, body: res.body, id: res._id, tagDom: res.anonymousTags.join(\" \")} );\n                    document.getElementById(\"tagsname\").value = this.state.tagDom;\n                }\n                \n            })\n            // \n            let editor = document.querySelector(\"textarea.mde-text \");\n            editor.setAttribute(\"id\", \"announ-content\")\n            editor.setAttribute(\"name\", \"announ-content\")\n    \n            document.querySelector(\"#tageditor-replacing-tagnames--input\").addEventListener(\"keyup\", this.handleChangeTag, false);\n        } catch (err) {\n            alert(\"Blog not found\")\n        }\n    }\n    componentDidUpdate() {\n        let tagsIncludedSize = document.querySelector(\".tags-included\").offsetWidth;\n        document.querySelector(\"#tageditor-replacing-tagnames--input\").style.paddingLeft = tagsIncludedSize + 10 + \"px\";\n    }\n    componentWillUnmount() {\n        document.querySelector(\"#tageditor-replacing-tagnames--input\").removeEventListener(\"keyup\", this.handleChangeTag, false);\n    }\n\n    render() {\n        const { tagDom, message, title, body } = this.state;\n        return (\n            <div id=\"content\">\n                <div id=\"mainbar\" style={{width: \"100%\"}}>\n                    <Notify />  \n                    {message !== \"\" &&  <Notify class=\"on\" text={message} clearMess={this.clearMess} />}\n                    <div id=\"announ-form\">\n                        <div className=\"bg-white bar-sm bs-md p16\">\n                            <div className=\"post-title ps-relative mb16\">\n                                <label htmlFor=\"title\" className=\"s-label mb4\">\n                                    Title\n                                    <p className=\"s-desscription mt4\">A programming language or whatever </p>\n                                </label>\n                            </div>\n                            <div className=\"ps-relative mb16\">\n                                <input id=\"title\" name=\"title\" type=\"text\" className=\"s-input w-100\"\n                                    value={title}\n                                    onChange={ (e) => this.handleChangeValue(e.target.value) }\n                                />\n                            </div>\n                            \n                            <div className=\"post-editor mb16\">\n                                <div className=\"ps-relative\">\n                                    <label htmlFor=\"announ-content\" className=\"s-label mb16 d-block\">\n                                        Body\n                                        <p className=\"s-desscription mt4\">Announcement body (all of the information about the announcement)</p>\n                                    </label>\n                                    {/* <ReactMarkdown source={body}/> */}\n                                    <pre>{body}</pre>\n                                    <Mde />\n                                    {/* CAPTOPN */}\n                                    <div className=\"d-flex align-items-center pb12 fc-light fs-caption mt16 mb24\">\n                                        <div className=\"mr16\">\n                                            ``` <code className=\"ba bc-black-9 px4 py2 bar-sm bg-black-050 fc-black-800 ff-mono\">code</code> ```\n                                        </div>\n                                        <div className=\"mr16 fw-bold\">\n                                            **bold**\n                                        </div>\n                                        <div className=\"mr16 fs-italic\">\n                                            *italic*\n                                        </div>\n                                        <div className=\"\">\n                                            &gt;quote\n                                        </div>\n                                    </div>\n                                    {/* TAGS EDITOR */}\n                                    <div className=\"ps-relative pt24\" id=\"tag-editor\">\n                                        <label htmlFor=\"tagsname\" className=\"s-label mb16 d-block\">\n                                            Tags\n                                            <p className=\"s-desscription mt4\">Add tags to describe what your announcement is about</p>\n                                        </label>\n                                        <div className=\"ps-relative mb16\">\n                                            <input \n                                                id=\"tagsname\" name=\"tagsname\" type=\"text\" className=\"s-input w-100 d-none\" placeholder=\"e.g. (javascript xml react)\"    \n                                            />\n                                            <div className=\"tags-editor ps-relative\" >\n                                                <span className=\"tags-included ps-absolute\">\n                                                    \n                                                    {\n                                                        tagDom.split(\" \").map( (tag, index) => {\n                                                            return tag !== \"\" && <Tags key={index} id={\"data-\" + tag} closeTag={() => this.closeTag(tag)} name={tag} close={true}/>\n                                                        })\n                                                    }\n                                                </span>\n                                            <input\n                                                type=\"text\" className=\"s-input w-100\" placeholder=\"e.g. (javascript xml react)\"\n                                                id=\"tageditor-replacing-tagnames--input\"\n                                                onChange={(e) => this.handleChangeTag(e.target.value, e.keyCode)}\n                                            />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n    \n                            <button\n                                className=\"s-btn s-btn__outline s-btn__primary mt24\"\n                                onClick={this.handleEditBlog}\n                            >Save this</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"clear-fix\"></div>\n            </div>\n        )\n    }\n}\n\nexport default EditQuestion;"]},"metadata":{},"sourceType":"module"}