{"ast":null,"code":"export const onSearchQuestions = plainText => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/search?q=\").concat(plainText), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR SEARCH QUESTIONS\"\n    };\n  });\n};\nexport const postAsk = (askInfo, token) => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/new\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\",\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: JSON.stringify(askInfo)\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR POST ASK\"\n    };\n  });\n};\nexport const getQuestions = () => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/questions\"), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR GET QUESTIONS\"\n    };\n  });\n};\nexport const getSingleQuestion = id => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/questions/\").concat(id), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR GET SINGLE QUESTION\"\n    };\n  });\n};\nexport const getSingleQuestionToEdit = (id, uid) => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/questions/edit/\").concat(id, \"?uid=\").concat(uid), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR GET SINGLE QUESTION TO EDIT\"\n    };\n  });\n};\nexport const getYourQuestions = userId => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/your-questions?userId=\").concat(String(userId)), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR GET YOUR QUESTIONS \" + err\n    };\n  });\n};\nexport const postAnswer = (answerInfo, token) => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/answer/new\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\",\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: JSON.stringify(answerInfo)\n  }).then(res => {\n    return res.json();\n  }).catch(error => {\n    return {\n      message: \"ERROR POST ANSWER\"\n    };\n  });\n};\nexport const getAnswers = quesId => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/answers/\").concat(quesId), {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\"\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR GET ANSWERS\"\n    };\n  });\n};\nexport const putEditQuestion = (quesInfo, token) => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/questions/edit/\").concat(quesInfo.id), {\n    method: \"PUT\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\",\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: JSON.stringify(quesInfo)\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR PUT UPDATE QUESTION\"\n    };\n  });\n};\nexport const deleteQuestion = (qid, token) => {\n  return fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/asks/questions/delete/\").concat(qid), {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\",\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    return {\n      message: \"ERROR DELETE QUESTION\"\n    };\n  });\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/Cloud/Project-NL/liars-ask-react-deploy/client/src/controllers/askController.js"],"names":["onSearchQuestions","plainText","fetch","process","env","REACT_APP_API_URL","method","headers","Accept","then","res","json","catch","err","message","postAsk","askInfo","token","Authorization","body","JSON","stringify","getQuestions","getSingleQuestion","id","getSingleQuestionToEdit","uid","getYourQuestions","userId","String","postAnswer","answerInfo","error","getAnswers","quesId","putEditQuestion","quesInfo","deleteQuestion","qid"],"mappings":"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","sourcesContent":["export const onSearchQuestions = (plainText) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/search?q=${plainText}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        }\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR SEARCH QUESTIONS\"}\n    })\n}\n\n\nexport const postAsk = (askInfo, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/new`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(askInfo)\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR POST ASK\"}\n    });\n}\n\nexport const getQuestions = () => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/questions`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        },\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR GET QUESTIONS\"}\n    });\n}\n\nexport const getSingleQuestion = (id) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/questions/${id}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        },\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR GET SINGLE QUESTION\"}\n    });\n}\n\nexport const getSingleQuestionToEdit = (id, uid) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/questions/edit/${id}?uid=${uid}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        },\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR GET SINGLE QUESTION TO EDIT\"}\n    });\n}\n\nexport const getYourQuestions = (userId) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/your-questions?userId=${String(userId)}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        },\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR GET YOUR QUESTIONS \" + err}\n    });\n}\n\n\n\nexport const postAnswer = (answerInfo, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/answer/new`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(answerInfo)\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( error => {\n        return {message: \"ERROR POST ANSWER\"}\n    });\n}\n\nexport const getAnswers = (quesId) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/answers/${quesId}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\"\n        },\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR GET ANSWERS\"}\n    });\n}\n\nexport const putEditQuestion = (quesInfo, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/questions/edit/${quesInfo.id}`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(quesInfo)\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR PUT UPDATE QUESTION\"}\n    });\n}\n\nexport const deleteQuestion = (qid, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/asks/questions/delete/${qid}`, {\n        method: \"DELETE\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\",\n            Authorization: `Bearer ${token}`\n        }\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        return {message: \"ERROR DELETE QUESTION\"}\n    });\n}"]},"metadata":{},"sourceType":"module"}